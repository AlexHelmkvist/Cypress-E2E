{
	"info": {
		"_postman_id": "95369a05-5220-4187-8f3b-3151606131d2",
		"name": "ZignSec-V5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39381365",
		"_collection_link": "https://intern-8685.postman.co/workspace/ZignSecIntern~a7c1003e-98e0-437d-9d9a-2094ca8a1d7b/collection/39381365-95369a05-5220-4187-8f3b-3151606131d2?action=share&source=collection_link&creator=39381365"
	},
	"item": [
		{
			"name": "Scan",
			"item": [
				{
					"name": "Dokument",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const statusCode = pm.response.code;\r",
									"const isSuccessfulStatusCode = statusCode >= 200 && statusCode < 300;\r",
									"\r",
									"if (isSuccessfulStatusCode) {\r",
									"    const res = pm.response.json();\r",
									"    pm.collectionVariables.set(\"sessionId\", res.data.id);\r",
									"    pm.collectionVariables.set(\"redirectUrl\", res.data.redirect_url);\r",
									"}\r",
									"else{\r",
									"    const res = pm.response.json();\r",
									"    pm.collectionVariables.set(\"sessionId\", res.extensions.traceId);\r",
									"}\r",
									"\r",
									"pm.test(\"Check errors\", function () {\r",
									"    pm.expect(jsonData.data.errors).to.be.an('array').that.is.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Check status\", function () {\r",
									"   pm.expect(jsonData.data.status).to.eql(\"GeneratedLink\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check id\", function () {\r",
									"    const expectedId = pm.collectionVariables.get(\"sessionId\");\r",
									"    pm.expect(jsonData.data.id).to.eql(expectedId);\r",
									"});\r",
									"\r",
									"pm.test(\"Check redirect_url\", function () {\r",
									"    const expectedRedirectUrl = pm.collectionVariables.get(\"redirectUrl\");\r",
									"    pm.expect(jsonData.data.redirect_url).to.eql(expectedRedirectUrl);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "XHoPKEYCPj0kBWMKFkcMfl0tVGM6GjgLnOcCrTl_UjWAr7HHnO2RVhUn"
							},
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"redirect_failure\": \"{{redirectFailure}}\",\r\n    \"redirect_success\": \"{{redirectSuccess}}\",\r\n    \"relay_state\": \"{{customerId}}\",\r\n    \"webhook\": \"{{webhook}}\",\r\n    \"gdpr_user_id\": \"{{gdprUserId}}\",\r\n    \"metadata\": {\r\n        \"analysis_types\": [\r\n            \"Document\"\r\n        ],\r\n        \"language\": \"{{language}}\",\r\n        \"country_code\": \"{{country_code}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v5/sessions/scanning-dp50/web",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v5",
								"sessions",
								"scanning-dp50",
								"web"
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://test-gateway.zignsec.com/core/api/sessions/scanning/web' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'x-csrf-token: XHoPKEYCPj0kBWMKFkcMfl0tVGM6GjgLnOcCrTl_UjWAr7HHnO2RVhUn' \\\r\n  -d '{\r\n  \"gdpr_user_id\": \"string\",\r\n  \"locale\": \"En\",\r\n  \"metadata\": {\r\n    \"analysis_types\": [\r\n      \"Document\",\r\n      \"FaceMatch\"\r\n    ],\r\n    \"language\": \"EN\",\r\n    \"ui_data\": {}\r\n  },\r\n  \"redirect_failure\": \"https://my_failure_url.com\",\r\n  \"redirect_success\": \"https://my_success_url.com\",\r\n  \"relay_state\": \"my-unique-customer-id\",\r\n  \"webhook\": \"https://my_webhook_url.com\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Get-pending",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"verify status\", function () {\r",
									"    //pm.expect(jsonData.data.status).to.be.exist;\r",
									"    pm.expect(jsonData.data.status).to.be.eq('GeneratedLink');\r",
									"});\r",
									"pm.test(\"verify locale\", function () {\r",
									"    //pm.expect(jsonData.data.status).to.be.exist;\r",
									"    const res = pm.response.json();\r",
									"    pm.collectionVariables.set(\"locale\", res.data.locale);\r",
									"    const expectedlokale = pm.collectionVariables.get(\"locale\");\r",
									"    pm.expect(jsonData.data.lokale).to.eql(expectedlokale);\r",
									"    \r",
									"});\r",
									"pm.test(\"Verify errors property\", function () {\r",
									"    pm.expect(jsonData.data.errors).to.be.an('array').that.is.empty;\r",
									"\r",
									"});\r",
									"pm.test(\"Verify that id is number and is updated\", function () {\r",
									"    const expectedId = pm.collectionVariables.get(\"sessionId\");\r",
									"    pm.expect(jsonData.data.id).to.eql(expectedId);\r",
									"\r",
									"});\r",
									"pm.test(\"Verify result documentAnalysis\", function () {\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.images).to.be.an('array').that.is.empty;\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.ignoredErrorsInFields).to.be.an('array').that.is.empty;\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.excludedDocumentIds).to.be.an('array').that.is.empty;\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.history).to.be.an('array').that.is.empty;\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.status).to.be.eq('Requested');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify result livenessAnalysis\", function () {\r",
									"    pm.expect(jsonData.data.result.livenessAnalysis.history).to.be.an('array').that.is.empty;\r",
									"    pm.expect(jsonData.data.result.livenessAnalysis.status).to.be.eq(\"NotRequested\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify result faceMatchAnalysis\", function () {\r",
									"    pm.expect(jsonData.data.result.faceMatchAnalysis.usedImages).to.be.an('array').that.is.empty;\r",
									"    pm.expect(jsonData.data.result.faceMatchAnalysis.history).to.be.an('array').that.is.empty;\r",
									"    pm.expect(jsonData.data.result.faceMatchAnalysis.status).to.be.eq(\"NotRequested\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify result document\", function () {\r",
									"    pm.expect(jsonData.data.result.documents).to.be.an('array').that.is.empty;\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-csrf-token",
								"value": "XHoPKEYCPj0kBWMKFkcMfl0tVGM6GjgLnOcCrTl_UjWAr7HHnO2RVhUn"
							},
							{
								"key": "Authorization",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v5/sessions/scanning-dp50/{{sessionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v5",
								"sessions",
								"scanning-dp50",
								"{{sessionId}}"
							]
						},
						"description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://test-gateway.zignsec.com/core/api/sessions/scanning/web' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'x-csrf-token: XHoPKEYCPj0kBWMKFkcMfl0tVGM6GjgLnOcCrTl_UjWAr7HHnO2RVhUn' \\\r\n  -d '{\r\n  \"gdpr_user_id\": \"string\",\r\n  \"locale\": \"En\",\r\n  \"metadata\": {\r\n    \"analysis_types\": [\r\n      \"Document\",\r\n      \"FaceMatch\"\r\n    ],\r\n    \"language\": \"EN\",\r\n    \"ui_data\": {}\r\n  },\r\n  \"redirect_failure\": \"https://my_failure_url.com\",\r\n  \"redirect_success\": \"https://my_success_url.com\",\r\n  \"relay_state\": \"my-unique-customer-id\",\r\n  \"webhook\": \"https://my_webhook_url.com\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "GetReultat finished",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if request data is retrieved successfully\", function () {\r",
									"    pm.expect(jsonData.data.request_data.redirect_failure).to.equal(\"https://www.bing.com/?q=failure\");\r",
									"    pm.expect(jsonData.data.request_data.redirect_success).to.equal(\"https://www.google.com/?q=success\");\r",
									"    pm.expect(jsonData.data.request_data.relay_state).to.equal(\"internal-user-id\");\r",
									"    pm.expect(jsonData.data.request_data.gdpr_user_id).to.equal(\"gdpr_user_id\");\r",
									"    pm.expect(jsonData.data.request_data.webhook).to.equal(\"https://webhook.site/340f6dc8-80ac-4dc8-b43f-9b94d3dc26ef\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify locale\", function () {\r",
									"    //pm.expect(jsonData.data.status).to.be.exist;\r",
									"    const res = pm.response.json();\r",
									"    pm.collectionVariables.set(\"locale\", res.data.locale);\r",
									"    const expectedlokale = pm.collectionVariables.get(\"locale\");\r",
									"    pm.expect(jsonData.data.lokale).to.eql(expectedlokale);\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"verify status\", function () {\r",
									"    pm.expect(jsonData.data.status).to.be.eq(\"Declined\");\r",
									"});\r",
									"\r",
									"pm.test(\"No errors\", function () {\r",
									"    pm.expect(jsonData.data.errors).to.be.eql([]);\r",
									"});\r",
									"pm.test(\"Verify document analysis images\", function () {\r",
									"    const res = pm.response.json();\r",
									"    const expectedAnalysisImages = pm.collectionVariables.get(\"AnalysisImages\");\r",
									"    pm.collectionVariables.set(\"AnalysisImages\", res.data.result.documentAnalysis.images[0].url);\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.images[0].url).to.be.eql(expectedAnalysisImages);\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.images[0].mimeType).to.be.eql(\"image/jpeg\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.textResult.validityStatus).to.be.eql(\"None\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.summary.overallStatus).to.be.eql(\"Error\");\r",
									"});\r",
									"pm.test(\"Verify document analysis identity\", function () {\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.identity.countryCode).to.be.eql(\"SE\");\r",
									"    \r",
									"    pm.expect(jsonData.data.result.documentAnalysis.identity.firstName).to.be.eql(\"JAN EVERT JIMMY\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identity.firstName).to.be.eql(\"OHAN\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identity.firstName).to.be.eql(\"SVEN\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.identity.lastName).to.be.eql(\"OWINDEBORN\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identity.lastName).to.be.eql(\"ANDERSSON\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identity.lastName).to.be.eql(\"SPECIMEN\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.identity.fullName).to.be.eql(\"OWINDEBORN JAN EVERT JIMMY\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identity.fullName).to.be.eql(\"ANDERSSON OHAN\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identity.fullName).to.be.eql(\"SPECIMEN SVEN\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.identity.personalNumber).to.be.eql(\"\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identity.personalNumber).to.be.eql(8703142391);\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identity.gender).to.be.eql(\"M\");\r",
									"    pm.expect(jsonData.data.result.identity.dateOfBirth).to.be.eql(\"1989-07-09\");\r",
									"    //pm.expect(jsonData.data.result.identity.dateOfBirth).to.be.eql(\"1966-02-02\");\r",
									"    //pm.expect(jsonData.data.result.identity.dateOfBirth).to.be.eql(\"1987-03-14\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.identity.age).to.be.eql(35);\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identity.age).to.be.eql(37);\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.identity.idProviderName).to.be.eql(\"DP50\");\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify document analysis identityEnglish\", function () {\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.identityEnglish.countryCode).to.be.eql(\"SE\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.identityEnglish.firstName).to.be.eql(\"JAN EVERT JIMMY\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identityEnglish.firstName).to.be.eql(\"SVEN\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.identityEnglish.lastName).to.be.eql(\"OWINDEBORN\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identityEnglish.lastName).to.be.eql(\"SPECIMEN\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identityEnglish.fullName).to.be.eql(\"OWINDEBORN JAN EVERT JIMMY\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identityEnglish.fullName).to.be.eql(\"SPECIMEN SVEN\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identityEnglish.personalNumber).to.be.eql(\"8703142391\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.identityEnglish.dateOfBirth).to.be.eql(\"1989-07-09\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identityEnglish.dateOfBirth).to.be.eql(\"1966-02-02\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identityEnglish.dateOfBirth).to.be.eql(\"1987-03-14\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.identityEnglish.age).to.be.eql(35);\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identityEnglish.age).to.be.eql(58);\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identityEnglish.age).to.be.eql(37);\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.identityEnglish.gender).to.be.eql(\"M\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.identity.idProviderName).to.be.eql(\"DP50\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.documentType.type).to.be.eql(\"DRIVING_LICENSE\");\r",
									"    \r",
									"\r",
									"});\r",
									"pm.test(\"Verify document analysis overallStatus\", function () {\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.overallStatus).to.be.eq(\"Error\");\r",
									"});\r",
									"pm.test(\"Verify documentType\", function () {\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.documentType.name).to.be.eq(\"Sweden - Driving License (2013)\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.documentType.name).to.be.eq(\"Sweden - Driving License (2007)\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.documentType.name).to.be.eq(\"Sweden - ePassport (2012)\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.documentType.type).to.be.eq(\"PASSPORT\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.documentType.year).to.be.eq(\"2013\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.documentType.year).to.be.eq(\"2007\");\r",
									"    //pm.expect(jsonData.data.result.documentAnalysis.documentType.year).to.be.eq(\"2012\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.documentType.countryName).to.be.eq(\"Sweden\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.documentType.countryCode).to.be.eq(\"SE\");\r",
									"    pm.expect(jsonData.data.result.documentAnalysis.documentType.hasMrz).to.be.eq(false);\r",
									"    \r",
									"});\r",
									"pm.test(\"Verify livenessAnalysis status\", function () {\r",
									"    pm.expect(jsonData.data.result.livenessAnalysis.status).to.be.eq(\"NotRequested\");\r",
									"    \r",
									"});\r",
									"pm.test(\"Verify faceMatchAnalysis status\", function () {\r",
									"   pm.expect(jsonData.data.result.faceMatchAnalysis.status).to.be.eq(\"NotRequested\");\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{auth}}"
							},
							{
								"key": "x-csrf-token",
								"value": "XHoPKEYCPj0kBWMKFkcMfl0tVGM6GjgLnOcCrTl_UjWAr7HHnO2RVhUn"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v5/sessions/scanning-dp50/{{sessionId}}/details",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v5",
								"sessions",
								"scanning-dp50",
								"{{sessionId}}",
								"details"
							]
						},
						"description": "Generated from cURL: curl -X 'GET' \\\r\n  'https://test-gateway.zignsec.com/core/api/sessions/9079e17c-8061-4646-85e6-e9b8eef66ab2' \\\r\n  -H 'accept: application/json' \\\r\n  -H 'authorization: 9bb9d9779a174583a45710e1900d9617' \\\r\n  -H 'x-csrf-token: XHoPKEYCPj0kBWMKFkcMfl0tVGM6GjgLnOcCrTl_UjWAr7HHnO2RVhUn'"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "inherit"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://test-gateway.zignsec.com",
			"type": "string"
		},
		{
			"key": "auth",
			"value": "",
			"type": "string"
		},
		{
			"key": "autoStartToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "sessionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "sessionIdBrow",
			"value": "",
			"type": "string"
		},
		{
			"key": "redirectFailure",
			"value": "https://www.bing.com/?q=failure",
			"type": "string"
		},
		{
			"key": "redirectSuccess",
			"value": "https://www.google.com/?q=success",
			"type": "string"
		},
		{
			"key": "webhook",
			"value": "https://webhook.site/340f6dc8-80ac-4dc8-b43f-9b94d3dc26ef",
			"type": "string"
		},
		{
			"key": "gdprUserId",
			"value": "gdpr_user_id",
			"type": "string"
		},
		{
			"key": "customerId",
			"value": "internal-user-id",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "redirectUrl",
			"value": "",
			"type": "string"
		},
		{
			"key": "country_code",
			"value": "country_code",
			"type": "string"
		},
		{
			"key": "language",
			"value": "language",
			"type": "string"
		},
		{
			"key": "AnalysisImages",
			"value": "",
			"type": "string"
		},
		{
			"key": "locale",
			"value": "locale"
		}
	]
}